document.addEventListener('DOMContentLoaded', function() {
    const markdownContainer = document.getElementById('markdownContainer');
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ URL
    const urlParams = new URLSearchParams(window.location.search);
    const file = urlParams.get('file');
    const title = urlParams.get('title') || '–õ–µ–∫—Ü–∏—è';
    const category = urlParams.get('category') || 'programming';
    const subcategory = urlParams.get('subcategory') || '';
    const author = urlParams.get('author') || 'Syntax_Syndicate';
    
    if (!file) {
        showError('–§–∞–π–ª –Ω–µ —É–∫–∞–∑–∞–Ω');
        return;
    }
    
    loadMarkdownFile(file, title, category, subcategory, author);
    
// –í —Ñ–∞–π–ª–µ markdown-viewer.js –∑–∞–º–µ–Ω–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é loadMarkdownFile:
function loadMarkdownFile(file, title, category, subcategory, author) {
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
    let filePath = `docs/${file}`;
    
    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–ª–µ—à–∏
    filePath = filePath.replace(/\/\//g, '/');
    
    fetch(filePath)
        .then(response => {
            if (!response.ok) {
                // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å
                const altPath = file.startsWith('docs/') ? file : `docs/${file}`;
                return fetch(altPath);
            }
            return response;
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            return response.text();
        })
        .then(markdown => {
            displayMarkdown(markdown, title, category, subcategory, author);
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', error);
            showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–µ–∫—Ü–∏—é: ' + error.message);
        });
}
    
    function displayMarkdown(markdown, title, category, subcategory, author) {
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º marked –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
        marked.setOptions({
            highlight: function(code, lang) {
                if (lang && hljs.getLanguage(lang)) {
                    try {
                        return hljs.highlight(code, { language: lang }).value;
                    } catch (err) {
                        console.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞:', err);
                    }
                }
                return hljs.highlightAuto(code).value;
            },
            breaks: true,
            gfm: true
        });
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º markdown –≤ HTML
        const htmlContent = marked.parse(markdown);
        
        // –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        const content = `
            <div class="markdown-header">
                <h1 class="markdown-title">${title}</h1>
                <div class="markdown-meta">
                    <span class="meta-badge">${getCategoryLabel(category)}</span>
                    ${subcategory ? `<span class="meta-badge" style="background: #ed8936;">${getSubcategoryLabel(subcategory)}</span>` : ''}
                    <span class="meta-badge" style="background: #48bb78;">üë®‚Äçüíª ${author}</span>
                    <span class="meta-badge" style="background: #9f7aea;">üìö –õ–µ–∫—Ü–∏—è</span>
                </div>
                <div class="lection-actions">
                    <button onclick="window.print()" class="btn btn-primary">
                        <i class="fas fa-print"></i> –ü–µ—á–∞—Ç—å
                    </button>
                    <button onclick="toggleDarkMode()" class="btn btn-secondary">
                        <i class="fas fa-moon"></i> –¢–µ–º–Ω–∞—è —Ç–µ–º–∞
                    </button>
                </div>
            </div>
            <div class="markdown-content">
                ${htmlContent}
            </div>
        `;
        
        markdownContainer.innerHTML = content;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.title = `${title} | Syntax_Syndicate`;
    }
    
    function showError(message) {
        markdownContainer.innerHTML = `
            <div class="error">
                <i class="fas fa-exclamation-triangle" style="font-size: 3rem; margin-bottom: 1rem;"></i>
                <h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
                <p>${message}</p>
                <div style="margin-top: 2rem;">
                    <a href="lections.html" class="btn btn-primary">
                        <i class="fas fa-arrow-left"></i> –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ª–µ–∫—Ü–∏—è–º
                    </a>
                </div>
            </div>
        `;
    }
    
    function getCategoryLabel(category) {
        const categories = {
            'programming': 'üíª –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ',
            'design': 'üé® –î–∏–∑–∞–π–Ω',
            'devops': '‚öôÔ∏è DevOps',
            'data-science': 'üìä Data Science',
            'cybersecurity': 'üîê –ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å',
            'linux': 'üêß Linux',
            'windows': 'ü™ü Windows'
        };
        return categories[category] || category;
    }
    
    function getSubcategoryLabel(subcategory) {
        const subcategories = {
            'frontend': 'üé® Frontend',
            'backend': '‚öôÔ∏è Backend',
            'bash': 'üêö Bash',
            'ux-design': 'üé® UX Design',
            'ui-design': 'üé® UI Design'
        };
        return subcategories[subcategory] || subcategory;
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
function toggleDarkMode() {
    const isDark = document.body.classList.toggle('dark-mode');
    window.settingsManager.updateSetting('darkTheme', isDark);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Ç–µ–º—ã
function applySavedTheme() {
    if (localStorage.getItem('darkMode') === 'true') {
        document.body.classList.add('dark-mode');
    }
}

// –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
applySavedTheme();